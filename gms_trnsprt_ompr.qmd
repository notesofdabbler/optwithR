---
title: "Transportation Model with OMPR and HiGHS"
date: September 4, 2022
author: notesofdabbler
execute: 
  warning: false
format:
  html:
    code-fold: true
---

We show how to solve the transportation problem using [OMPR](https://dirkschumacher.github.io/ompr/) modeling language and [HiGHS](https://cran.r-project.org/web/packages/highs/index.html) solver. Transportation problem is a classic operations research problem where the objective is to find the minimum cost way to ship material from producers/plants to customers/markets. The specific instance of the problem we have used is from [GAMS model library](https://www.gams.com/latest/gamslib_ml/libhtml/gamslib_trnsport.html). Only portions of R code are shown here. The `.qmd` with all embedded R code is in this [location](https://github.com/notesofdabbler/optwithR/blob/main/gms_trnsprt_ompr.qmd)

```{r}
# load libraries and source functions
library(dplyr)
library(highs)
library(ompr)
library(ompr.roi)
library(gt)
library(glue)
library(visNetwork)

source("ompr_helperfns.R")
source("helper_fns.R")
```

```{r}
plants = c("seattle", "sandiego")
mkts = c("newyork", "chicago", "topeka")

cap = c(350, 600) # plant capacity
dem = c(325, 300, 275) # market demand

# distance and cost between plants and markets
distdf = tibble(
  plants = rep(plants, each = 3),
  mkts = rep(mkts, 2),
  dist = c(2.5, 1.7, 1.8, 2.5, 1.8, 1.4) # distance in thousands of miles
)

f = 90 # freight dollars per case per thousands of miles

distdf = distdf %>% mutate(cost = f * dist / 1000)

cost = function(i, j) {
    p = plants[i]
    m = mkts[j]
    costval = distdf %>% filter(plants == p, mkts == m) %>% pull(cost)
    return(costval)
}

```

In this case there are 2 plants and 3 markets with data for the problem listed below:

::::: {.panel-tabset}

### Data

:::: {.columns}

::: {.column width="30%"}
```{r}
tibble(plant = plants, capacity = cap) %>% gt()
```
:::

::: {.column width="30%"}
```{r}
tibble(market = mkts, demand = dem) %>% gt()
```
:::

::: {.column width="40%"}
```{r}
distdf %>% select(plants, mkts, cost) %>% gt()
```
:::
::::

### Network

```{r}
# visualize network
visnetdf = make_visnetdf(distdf, plants, mkts)
visnetdf$nodes_df = visnetdf$nodes_df %>% mutate(level = ifelse(id <= 2, 1, 2),
                                       capdem = c(cap, dem),
                                       label = paste0(node, " (", capdem,")"),
                                       color = c(rep("red", 2), rep("green", 3)))
visNetwork(visnetdf$nodes_df, visnetdf$edges_df) %>% visEdges(arrows = "to") %>%
  visHierarchicalLayout()
```
:::::

::: {.panel-tabset}

### Mathematical Formulation
$$
\begin{array}{llr}
\min &\sum_{p=1}^P\sum_{m=1}^Mc_{pm}x_{pm} & (a) \\
&\sum_{m=1}^Mx_{pm} \leq cap_p, \;p=1,2,\ldots,P  & (b)\\
&\sum_{p=1}^Px_{pm} \geq dem_m, \;m=1,2,\ldots,M & (c) \\
&x_{pm} \geq 0, \;p=1,2,\ldots,P;\;m=1,2,\ldots,M
\end{array}
$$
where

* $x_{pm}$ is the quantity to be shipped from plant $p$ to market $m$ (decision variable)
* Objective (a) is to minimize shipping cost
* Constraint (b) ensures that total supply from a plant is below capacity
* Constraint (c) ensures that demand for each market is met.

### Model build using OMPR

```{r}
#| code-fold: false
np = length(plants)
nm = length(mkts)

# create ompr model
mdl = MIPModel() %>%
  add_variable(x[i, j], i=1:np, j=1:nm, type = "continuous",lb = 0) %>%
  # objective: min cost
  set_objective(sum_over(cost(i, j) * x[i, j], i = 1:np, j = 1:nm)) %>% 
  # supply from each plant is below capacity
  add_constraint(sum_over(x[i, j], j = 1:nm) <= cap[i], i = 1:np) %>%  
  # supply to each market meets demand
  add_constraint(sum_over(x[i, j], i = 1:np) >= dem[j], j = 1:nm)
```
:::

```{r}
# convert ompr model to highs model
highs_mdl = as_highs_model(mdl)

# solve highs model
s <- highs_solve(L = as.numeric(highs_mdl$L), lower = highs_mdl$lower, upper = highs_mdl$upper,
                 A = highs_mdl$A, lhs = highs_mdl$lhs, rhs = highs_mdl$rhs,
                 offset = highs_mdl$offset)

# get solution
sol_status = s[["status"]]
zobj = s[["objective_value"]]
xsol = s[["primal_solution"]]
names(xsol) = variable_keys(mdl)
zobj
xsol
```

```{r}
xsolL = list()
r = 0
for (i in 1:np) {
  for (j in 1:nm) {
    r = r + 1
    xsolL[[r]] = c(plants[i], mkts[j], xsol[[glue('x[{i},{j}]')]])
  }
}
soldf = as.data.frame(do.call(rbind, xsolL))
names(soldf) = c("plants", "mkts", "qty")
soldf = soldf %>% mutate(qty = as.numeric(as.character(qty)))
```

::: {.panel-tabset}

### Solution
```{r}
soldf %>% gt()
```

### Network
```{r}
# visnetwork visualization of solution
solvisnetdf = make_visnetdf(soldf %>% filter(qty > 0), plants, mkts)
solvisnetdf$nodes_df = solvisnetdf$nodes_df %>% mutate(level = ifelse(id <= 2, 1, 2),
                                                       capdem = c(cap, dem),
                                                       label = paste0(node, " (", capdem,")"),
                                                       color = c(rep("red", 2), rep("green", 3))
                                                       )
solvisnetdf$edges_df = solvisnetdf$edges_df %>% mutate(label = as.character(qty))
visNetwork(solvisnetdf$nodes_df, solvisnetdf$edges_df) %>% visEdges(arrows = "to") %>%
  visHierarchicalLayout()
```
:::

::: {.panel-tabset}

### ""

### Session Info
```{r}
sessionInfo()
```

:::
